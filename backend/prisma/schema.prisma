// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id          Int     @id @default(autoincrement())
  imageData   Bytes   // This is for storing the binary data
  imageName   String
  user        User    @relation(fields: [userId], references: [id]) // Relation to User model
  userId      Int     @unique // Foreign key, must be unique for one-to-one relation
}

model User {
  id          Int      @id @default(autoincrement())
  fullName    String
  role        Role
  email       String   @unique
  password    String
  phone       String   @db.VarChar(10)
  city        String?
  createdAt   DateTime @default(now())
  profilePic  Image?   // One-to-one relation with Image (optional)
  
  doctor      Doctor?
  patient     Patient?
  messages    Message[] @relation("UserMessages")
  chats       ChatParticipant[]
}

model Doctor {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  specialization    String
  experience        Int
  licenseNumber     String   @unique
  licenseAuthority  String
  licenseExpiry     DateTime
  availability      Json
  consultationCharge Float
  clinicAddress     String
  profile           String?
  createdAt         DateTime @default(now())

  user        User       @relation(fields: [userId], references: [id])
  appointments Appointment[]
}

model Patient {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  dob       DateTime
  gender    Gender
  createdAt DateTime @default(now())
  
  user        User        @relation(fields: [userId], references: [id])
  appointments Appointment[]
}

model Appointment {
  id               Int      @id @default(autoincrement())
  doctorId         Int
  patientId        Int
  appointmentDate  DateTime
  status           AppointmentStatus
  type             AppointmentType
  createdAt        DateTime @default(now())

  doctor  Doctor   @relation(fields: [doctorId], references: [id])
  patient Patient  @relation(fields: [patientId], references: [id])
}

model Chat {
  id          Int      @id @default(autoincrement())
  isActivated Boolean
  isBlocked   Boolean
  createdAt   DateTime @default(now())
  
  messages     Message[] 
  participants ChatParticipant[]  // Add the inverse relation here
}

model Message {
  id         Int      @id @default(autoincrement())
  chatId     Int
  senderId   Int
  message    String
  isDeleted  Boolean
  createdAt  DateTime @default(now())

  chat   Chat   @relation(fields: [chatId], references: [id])
  sender User   @relation(fields: [senderId], references: [id], name: "UserMessages")
}

model ChatParticipant {
  chatId  Int
  userId  Int

  chat   Chat   @relation(fields: [chatId], references: [id])  // Already defined correctly
  user   User   @relation(fields: [userId], references: [id])  // Already defined correctly

  @@id([chatId, userId])
}

enum Role {
  patient
  doctor
}

enum Gender {
  male
  female
}

enum AppointmentStatus {
  scheduled
  canceled
  completed
}

enum AppointmentType {
  online
  offline
}